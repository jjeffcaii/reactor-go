// Code generated by MockGen. DO NOT EDIT.
// Source: publisher.go

// Package subscribers is a generated GoMock package.
package subscribers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reactor "github.com/jjeffcaii/reactor-go"
	reflect "reflect"
)

// MockRawPublisher is a mock of RawPublisher interface
type MockRawPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockRawPublisherMockRecorder
}

// MockRawPublisherMockRecorder is the mock recorder for MockRawPublisher
type MockRawPublisherMockRecorder struct {
	mock *MockRawPublisher
}

// NewMockRawPublisher creates a new mock instance
func NewMockRawPublisher(ctrl *gomock.Controller) *MockRawPublisher {
	mock := &MockRawPublisher{ctrl: ctrl}
	mock.recorder = &MockRawPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRawPublisher) EXPECT() *MockRawPublisherMockRecorder {
	return m.recorder
}

// SubscribeWith mocks base method
func (m *MockRawPublisher) SubscribeWith(arg0 context.Context, arg1 reactor.Subscriber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeWith", arg0, arg1)
}

// SubscribeWith indicates an expected call of SubscribeWith
func (mr *MockRawPublisherMockRecorder) SubscribeWith(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWith", reflect.TypeOf((*MockRawPublisher)(nil).SubscribeWith), arg0, arg1)
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// SubscribeWith mocks base method
func (m *MockPublisher) SubscribeWith(arg0 context.Context, arg1 reactor.Subscriber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeWith", arg0, arg1)
}

// SubscribeWith indicates an expected call of SubscribeWith
func (mr *MockPublisherMockRecorder) SubscribeWith(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWith", reflect.TypeOf((*MockPublisher)(nil).SubscribeWith), arg0, arg1)
}

// Subscribe mocks base method
func (m *MockPublisher) Subscribe(arg0 context.Context, arg1 ...reactor.SubscriberOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Subscribe", varargs...)
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockPublisherMockRecorder) Subscribe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPublisher)(nil).Subscribe), varargs...)
}
